Day-1:  1.5
- discussed overall course content - split in to 4 modules 
- discussed assignments (both theory and lab) - Each assignment carries 10 marks 
- Attendance - 75% is important 
- student involvement in assessment process - consent form, pre-test and post-test steps instructions provided 
- Discussion about devices with operating systems and without operating systems

------------------------------------------------------------------------------------------------------------------
Day -2 : 1
- Scripting Vs programming
In Windows - Powershell 
In Linux   - bashshell 

- commands 
     - simple 
     - compound 
     - complex 
- Types 
     - internal 
     - external 
- Getting help 
      - man 
      - info 
      - help 
      - type
      - whatis 
      - which 
      - -- help (it is a option) 
        usage: command --help 
Readings:
Getting Help : https://bkeerthanamanipal.blogspot.com/2024/11/getting-help-in-linux.html
About man    : https://bkeerthanamanipal.blogspot.com/2024/11/

In Linux everything is file 
       - Regular 
       - Directory 
       - Special 
-started writing script 
      - included shebang line 

-----------------------------------------------------------------------------------------------------------------------
Day-3 : 1

Operating system 
      - Kernel 
      - shell 
      - File system 

To identify default shell 
To list all built in variables 

started writing script 
      - included shebang line 
      - added single statement 

To execute the script 

To set the permission - chmod 
       - numeric 
       - nemonic

ls -l 

Intro to 
       /etc/passwd
       /etc/group      
--------------------------------------------------------------------------------------------------------------------------
Day -4 : 2 

To check the type of file system 

different methods to create file 

Basic command : cat 
Intro to redirection  >, >>

File management 
        - cp
        - mv 
        - rm 
        - rmdir 
        - mkdir 

Globbing (operators)
       - *
       - ? 
       - [ ] 

Path name 
       - Absolute path 
       - Relative path 
---------------------------------------------------------------------------------------------------------------------------------
Day -5: 2 
Globbing 
     - More on character class 
     - { } 
sudo 
cat /etc/group 

Process 
    Program Vs. process 
    background Vs. foreground
    to check the current process 
    to kill the process by id 
    to send the job to background 
    to take from the background 
    to kill the process by name
Scheduling 
     abstract Level about at and cron 
     to schedule the command using at 
     Try : to schedule the script using at 

Self Exploration: Provided abstract idea 
      Extended globbing 
      adduser 
      addgroup 
      chown 
      chgrp
------------------------------------------------------------------------------------------------------------------------------------------
Day -6: 2 

Scheduling 
     at 
       at -f 
       atq
       atrm 

     cron 
         five + one parameter 
         min hour day month dow jobspecification >/abs/path 
        crontab 
        crontab -e
        crontab -l 

Networking 
       hostname
       whoami
       ifconfig
       scp 
       nslookup 
       ping 
       ssh  (Explore) 

 Quotes 
       Double    - consider special meaning 
       single    - no special meaning 
       Backtick  - command substitution 
       backslash - escape seq (next one character) 
----------------------------------------------------------------------------------------------------------------------------------------------
Day-7 : 2 
git 
  - what is git 
  - why do we need 
  - Types of version control 
            - centralized 
            - distributed 
  - git  Vs. github 
  - git commands 
          - To check git is installed or not 
          - To check the version of git 
          - Different methods to get help 

          - Set configuration 
               - Global , local , system 
               - set user name 
               - set email 
               - set default editor 

          - Methods to intialize 

          - working directory / untraced 
          - staging area
          - repoistory 

          - created file --> send to stage ---> send to repo

          - check the status 
          - check the log 
          - check the shortlog 

          - rename the file 

          - restore 
          - remove the stage 
---------------------------------------------------------------------------------------------------------------------------------------------------------
Day-8: 1
Power Utility / Filters 
           - head 
           - tail 


            -tr 

Techniques 
            pipe 
            redirection "<" 

Examples:
---------------------------------------------------------------------------------------------------------------------------------------------------------
Day-9: 
Power Utility: 
          - tr 
             -d
             -s
          - cut 
          - wc 
          - cat -n 
          - nl 
          - tac 
          - sort 
          - uniq 
          - grep 
              -e 
              -E 
              -i 
              -v
           - egrep
Exit status
          - application of exit status 
          - $? 

Lab:
        grep 
           -A
           -B
           -C
           -c 
           -E
           -f 
           -i
           -l
           -n
           -o
           -q
           -r 
           -s 
           -w
           -x

Explore: -L 
         -m
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Day-10: Regex 

         - ^
         - $ 
         - ^$ 
         - \< 
         - \>
         - .
         - [ ]
         - ^[ ]
         - [^ ]
         - ^[^ ] 
Difference between Regex and globbing 
                   BRE Vs. ERE Vs. PCRE
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Day-11 Scripting 
         - Constructs 
             - Sequential 
             - conditional 
                    - test 
                    - [ 
                    - if 
                    - case 
           - passing values to the program 
                    - hard code 
                    - read 
                         -p 
                         -t
                    - command line arguments / Positional parameters 
                         -S1 - first argument 
                         -$2 - second argument 
                         -$0 - file name 
                         -${10} - 10th argument 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Day-12: Scripting-II
            - Arithmetic operations 
                    - bc
                    - $((expression))

            - Scripting using 
                     - arithmetic 
                     - grep 

            - Pass value to program using 
                     - hard code 
                     - read statement 
                     - command line arguments 

             - $# 
             - conditional statements 
                      if
             - Intro to sed 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Day-13: Sed 
            - what is sed 
            - sed syntax
            - applications of sed 

            - compare grep,sed,awk 

            - commands 
                 p
                 d

            - variations 
              sed -options 'command' filename 
              sed -options '# command' filename 
              sed -options '/pattern/command' filename
              sed -options '#,# command' filename 
              sed -options '/pattern1/, /pattern2/ command' filename 
              sed -options '!command' filename 

            - p = !d 
            - d = !p 

            - options 
                -i --- infile

In Lab: 
          command 
             y 
             s
             a
             i 
             c 

          command "s" 
          sed 's/from/to/flag' filename 
          flag - 
          g    ---------- global 
          #    ---------- nth value 
          #g   ---------- from nth occurrence 
          i    ---------- ignore case 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Day-14:
         command 
          w 

         sed s flag
         w    --- Write only the substituted line to a file
         p    --- Print only the substituted line
         e    --- execute and Substitute in the command line
         &    --- get the matched pattern 
         


        Regular Expression 
        ( )  --- Group using ( and ). Use \1, \2 in replacement group
        {#}
        {#, } 
        { ,#}
        {#,#}
        + 
        . 
        ? 
        * 
        .*
        (.*) 

        Options 
         -e  ---to execute multiple commands 

        Compare grep and sed through examples 
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Day-15

Revisit - grep and its options 
Revisit - sed options and commands 

sed command 
         l 
         r 
         G
         n 

sed grouping 
        { sed command; sed command}

Intro to awk
        awk action block 
        awk pattern block 
        file --- record ---- fields are represented by $1, S2 and so on. 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Day-16
awk variables 
          - user defined variables 
          - built in variables 
                   NF
                   NR
          - BEGIN Block 
          - END Block
          - Pattern Block 
               /pattern/ 
               field  relational_op value  Ex: $3 > 40 
               field ~ "String"            Ex: $3 ~ "Asha"
           - Action Block 
               { print } 
               { c = c+1 } 
               { c = $1+$2 }
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Day -17
           - Pattern Block 
             /pattern1/ && /pattern2/ 
             /pattern1/ || /pattern2/
             !/pattern/ 
             $1> 10 
             $1 > 10 && $2 <=20
             $1 == "Asha" 
             $1 `"Asha"

           - Built in variables 
             FS 
             OFS 

             RS 
             ORS 

            - Options 
                 -f filename 
                 -F Fieldsep
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Day -18 

Pattern Block
  /Eve/,/Alice/ 
  /Eve/ && /Alice/
  /Eve/ || /Alice/  
  !/Eve/ 
  /(Eve|Alice)/ 


Built-in variable 
  IGNORECASE =1 # ignore case sensitive 

Subroutine
  BEGIN { }
  awk -F'[, ]' 'BEGIN {print "------"} {print $1}' contacts1.txt contacts.txt

  END { }

Option 
-v 
  awk -v use values.txt , values.awk  
  awk -v RS="[0-9]+" '{print $1}' randomstring
  awk -v IGNORECASE=1 '/Asha/ {print}' contacts.txt

-e 
  awk -e '/asha/' -e '/banu/'  contacts.txt

-f 
  awk -f values.awk values.txt 

-F 
  awk -F: '{print $1}' /etc/passwd 

Built-in variables 

RS
  awk -v RS="[0-9]+" '{print $1}' randomstring
 
RT 
awk -v RS="[0-9]+" '{print RT}' randomstring

Control statements 
if 
awk -F", " '{ if ($1 ~ /^D/ && $2 == "Bangalore") print $1 }' data.txt

{
if (NF > 1 && NF <= 2)
{
	print "perfect"
}
else if (NF >3)
	print "More Info"

else 
	print "not perfect"
}

----------------------------------
{
if (NF > 1)
{
	print "perfect"
}
else 
	print "not perfect"
}


for 
{
 for(i=1;i<=NF;i++)
  {
  total+=$i

  }
}
END {print total} 
#use values2.txt
10 20 30 40 50 

Built-in functions
     length 
     toupper
     tolower 

     split
     echo "Hello:world" | awk '{split($0,values,":");print values[2]}'

     gsub
     echo "Manipal" | awk '{gsub(/a/,"#",$0);print}'

System commands
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Day -19

Intro to Perl 
       - check perl is installed or not 
       - different ways to get help 
              man 
              perldoc 
              perl -h 


       - different ways to execute perl 
            command line
                        perl -e 'print "Hello\n"; ' 
            
            perl script 
                        perl filename.pl 

       - variables 
                 Scalar
                     $var
                 Array 
                      @var 


        - Diamond operators 


        - Power of one liners 
                    perl options 
                          - h to get help 
                          - c to get syntax 
                          - e to execute perl commands in command line 
                          - n  shorthand notation to while loop 
                          - p  same as option n  + print statement 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Day -20
 perl -n -e 'print' c1.txt
                  perl -p -e '' c1.txt
                  
	          perl -npe '$_' data.txt
	          perl -ne 'print $_' data.txt
	          
	          perl -p -e '$_ = uc($_);' file.txt
                  perl -p -e '$_ = lc($_);' file.txt
                  
                  perl -p -e '$_="" if /^\s*$/;' file.txt
                  
                  perl -n -e 'print "$. $_";' file.txt
                  perl -n -e '$_ = "$. $_"; print $_;' file.txt
                  perl -p -e '$_ = "$. $_";' file.txt
                  
                  printf '1:2:3:4\na:b:c:d\n' | perl -ne 's/:/-/g; print $_;'
                  printf '1:2:3:4\na:b:c:d\n' | perl -pe 's/:/-/g;'
                  
                  printf '1:2:3:4\na:b:c:d\n' | perl -pe 'tr/:/|/;'

String operations 
                  concat . 
                  repetition x

                  chop 
                  chomp 

                  pattern matching 

                      perl -ne 'print if /Eve/' data.txt 
		      perl -ne 'if (/Eve/) { print }' data.txt
     		      perl -ne 'if (/Eve/) { print} else { print "Not Eve\n"; }' data.txt
                      perl -ne 'if (/Asha/) { print "Found\n"} else { print "Not Eve\n"; }' data.txt

                  Matching operator  m/ /
                  substitution       s/a/b/
                  translation         tr/a/:/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Perl - 21
Perl 
       File operators 

perl constructs 
       if 
       unless 

perl array 
      push 
      pop 
      shift 
      unshift 
      splice 


command line arguments 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
In Lab - 

read from the file in bash: 

#!/usr/bin/bash
while read line
do 
echo "Read Line: $line"
done < greet.txt
------------------------------------------------
#!/bin/bash

patterns_file="patterns.txt"
search_file="data.txt"

while read -r pattern; do
  # Skip empty lines or lines starting with #
  [[ -z "$pattern" || "$pattern" =~ ^# ]] && continue
  
  echo "Searching for: $pattern"
  grep "$pattern" "$search_file"
  echo "----------------------------------"
done < "$patterns_file"


-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Perl - 
Literal  __DATA__ 
Array 
   split 
   join
   sort 
   reverse 
   <=> 
   get the items from the user and store in an array 
   count number of items in the array 
   shift 
   ARGV
   command line arguments

Intro to subroutine 

Sample Codes for your references: 

#!/usr/bin/perl
use strict;
use warnings;

# Read data from the __DATA__ section
while (<DATA>) {
    chomp;
    print "Line: $_\n";
}

__DATA__
This is the first line.
This is the second line.
Another line of data.
-------------------------------------------------------------------------------------------------------------
#!/usr/bin/perl -w

use strict;

sub greet {
    print "Hello\n";
    print "Welcome to Perl Command Line Arguments";
}

sub bye
{
 print "Have a nice day \n";
}

my $option = shift;    # defaults to shifting @ARGV 
                       # shift @ARGV

greet() if $option eq "-g" or $option eq "--greet";

bye () if $option eq "-b" or $option eq "--bye";

# print "Hello, world.\n";
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Day -22
Hands on the following topics 

  Perl command line arguments
  pattern matching 

Explore: 
  translate  tr///
  substitute  s///


  #!/usr/bin/perl
    use strict;
    use warnings;

    my $string1 = 'Perl has 196,905 modules, written by 14100 authors ';

    my $avg_contr = 196905/14100; 
    
    print $avg_contr; 
    
    print "\n";
    
    if ($string1 !~ m/\d/ ) 
    {
        print "Doesn't contain numbers\n";
    } else { 
        print "Does contain numbers\n";
    }

    exit 0;


my $file = <DATA>; 

my @strings = $file =~ /string/ig; #returns all except the last string across 
print scalar @strings;

__DATA__
String string string
Hello

--------------------------------------------------------------------------------------------
Day-23


---------------------------------------------------------------------------------------------

Lab
my @items = qw(apple banana cherry);
if (grep { $_ eq "banana" } @items) {
    print "Found banana!\n";
} else {
    print "Not found.\n";
}
-----------------------------------------------------------------------------------------
Day-24

Hash creation

#!/usr/bin/perl

use strict;
use warnings;
# creation of hash 

my %delays = (
    "AND"  => 0.5,
    "OR"   => 0.6,
    "NAND" => 0.4,
    "NOR"  => 0.7
);

# another method to create 
%delays = ('AND', 0.5, 'OR', 0.6, 'NAND', 0.4 , 'NOR', 0.7);

# add another value to hash
$delays{"XOR"} = 0.8;  # Add XOR gate delay

# get the value and key from the user 

print "Enter the name of the contact:";
$fname =<>;
print "Enter your friend number:";
$phone =<>; 

$contact{$fname}=$phone;
print "The value of hash is";

print %contact; 

# to check the value is exists or not 

if (exists $delays{"NOR"}) {
    print "NOR gate delay is $delays{'NOR'} ns\n";
} else {
    print "NOR gate not found\n";
}

